<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SharpMock.Utils\bin\$(ConfigurationName)\$(TargetFramework)\SharpMock.Utils.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpMock.Utils" #>
<#@ output extension=".cs" #>

using SharpMock.Library.Action;
using SharpMock.Library.Matchers;

namespace SharpMock.Library
{
<#

PushIndent("".PadLeft(4));
for (int i = 0; i <= Generators.ArgCount; ++i)
{
	GenerateActionEngine(i);
}
PopIndent();

#>
}
<#+


private void GenerateActionEngine(int count)
{
	var types = GenerateNumberedList("T{0}", count);
    var typeList = (types == "") ? "" : $"<{types}>";
    var argTypes = GenerateNumberedList("T{0} arg{0}", count);
    var args = GenerateNumberedList("arg{0}", count);

#>
public class ActionEngine<#= typeList #> : ActionEngineBase, IActionEngine<#= typeList #>
{
    public ActionEngine(string methodName) : base(methodName) { }

    public void Execute(<#= argTypes #>)
    {
        Execute((m, o) => ((MultiArgMatcher<#= typeList #>) m).Match(<#= (args == "") ? "" : args + ", " #>o),
            x => ((MultiArgAction<#= typeList #>) x).Execute(<#= args #>));
    }

    public IActionSetup<#= typeList #> Setup()
    {
        var setup = new ActionSetup<#= typeList #>();
        _activeSetups.Add(setup);

        return setup;
    }
}

<#+
}

public static string GenerateNumberedList(string format, int count)
{
	return string.Join(", ", Enumerable.Range(1, count).Select(i => string.Format(format, i)));
}
#>