<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SharpMock.Utils\bin\$(ConfigurationName)\$(TargetFramework)\SharpMock.Utils.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpMock.Utils" #>
<#@ output extension=".cs" #>

using SharpMock.Library.Matchers;
using System;

namespace SharpMock.Library
{
    public struct MockHolder<I>
    {
        private readonly IMock<I> _mock;

        public MockHolder(IMock<I> mock)
        {
            _mock = mock;
        }

		public IActionSetup Setup(System.Action action)
		{
			return ((IActionEngine)_mock.Engines[action.Method]).Setup();
		}

        public IFuncSetup<Ret> Setup<Ret>(Func<Ret> action)
        {
            return ((IFuncEngine<Ret>)_mock.Engines[action.Method]).Setup().Match();
        }

<#

PushIndent("".PadLeft(4 * 2));
for (int i = 1; i <= Generators.ArgCount; ++i)
{
	GenerateSetup(i);
}
PopIndent();

#>
	}
}
<#+

private void GenerateSetup(int argCount)
{
	var genericArgs = GenerateNumberedList("T{0}", argCount);
	var matchers = GenerateNumberedList("TypedMatcher<T{0}> m{0}", argCount);
	var matcherArgs = GenerateNumberedList("m{0}", argCount);

#>
public IActionSetup<<#= genericArgs #>> Setup<<#= genericArgs #>>(Action<<#= genericArgs #>> action, <#= matchers #>)
{
	return ((IActionEngine<<#= genericArgs #>>)_mock.Engines[action.Method]).Setup().Match(<#= matcherArgs #>);
}

public IFuncSetup<<#= genericArgs #>, Ret> Setup<<#= genericArgs #>, Ret>(Func<<#= genericArgs #>, Ret> action, <#= matchers #>)
{
	return ((IFuncEngine<<#= genericArgs #>, Ret>)_mock.Engines[action.Method]).Setup().Match(<#= matcherArgs #>);
}

<#+
}

public static string GenerateNumberedList(string format, int count)
{
	return string.Join(", ", Enumerable.Range(1, count).Select(i => string.Format(format, i)));
}

#>
