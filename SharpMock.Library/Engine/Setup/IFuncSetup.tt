<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SharpMock.Utils\bin\$(ConfigurationName)\$(TargetFramework)\SharpMock.Utils.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpMock.Utils" #>
<#@ output extension=".cs" #>
using System;

namespace SharpMock.Library
{
<#
PushIndent("".PadLeft(4));
for (int i = 0; i <= Generators.ArgCount; ++i)
{
	GenerateInterface(i);
}
PopIndent();
#>
}


<#+
private void GenerateInterface(int argCount)
{
	var types = GenerateNumberedList("T{0}", argCount);
    var commaTypes = (types == "") ? "" : ", " + types;
    var typesComma = (types == "") ? "" : types + ", ";

#>
public interface IFuncSetup<<#= typesComma #>Ret> : ISetup, ISetupMatch<IFuncSetup<<#= typesComma #>Ret><#= commaTypes #>>, ISetupCardinality<IFuncSetup<<#= typesComma #>Ret>>, IFuncSetupAct<Ret>
{
	IFuncSetup<<#= typesComma #>Ret> Do(Ret func);
	IFuncSetup<<#= typesComma #>Ret> Do(Func<<#= typesComma #>Ret> func);
}

<#+
}

public static string GenerateNumberedList(string format, int count)
{
	return string.Join(", ", Enumerable.Range(1, count).Select(i => string.Format(format, i)));
}
#>