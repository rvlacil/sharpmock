<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SharpMock.Utils\bin\$(ConfigurationName)\$(TargetFramework)\SharpMock.Utils.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpMock.Utils" #>
<#@ output extension=".cs" #>
using SharpMock.Library.Matchers;
using System;

namespace SharpMock.Library
{
    public interface ISetupMatch<Self> : ISetup<Self> where Self : ISetup<Self>
    {
        Self Match();
    }

<#

PushIndent("".PadLeft(4));
for (int i = 1; i <= Generators.ArgCount; ++i)
{
	GenerateInterface(i);
}
PopIndent();

#>
}
<#+

private void GenerateInterface(int argCount)
{
	var genericArgs = GenerateNumberedList("T{0}", argCount);
	var arguments = GenerateNumberedList("TypedMatcher<T{0}> arg{0}", argCount);

#>
public interface ISetupMatch<Self, <#= genericArgs #>> : ISetup<Self> where Self : ISetup<Self>
{
	Self Match(<#= arguments #>);
}

<#+
}

public static string GenerateNumberedList(string format, int count)
{
	return string.Join(", ", Enumerable.Range(1, count).Select(i => string.Format(format, i)));
}
#>