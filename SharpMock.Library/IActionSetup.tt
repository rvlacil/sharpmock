<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\SharpMock.Utils\bin\$(ConfigurationName)\$(TargetFramework)\SharpMock.Utils.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpMock.Utils" #>
<#@ output extension=".cs" #>

namespace SharpMock.Library
{
<#

PushIndent("".PadLeft(4));
for (int i = 0; i <= Generators.ArgCount; ++i)
{
	Generate(i);
}
PopIndent();

#>
}
<#+

private void Generate(int argCount)
{
	var types = GenerateNumberedList("T{0}", argCount);
    var typeList = (types == "") ? "" : $"<{types}>";

#>
public interface IActionSetup<#= typeList #> : ISetup, ISetupMatch<IActionSetup<#= typeList #><#= (types == "" ? "" : ", " + types) #>>, ISetupCardinality<IActionSetup<#= typeList #>>, IActionSetupAct
{
    IActionSetup<#= typeList #> Do(System.Action<#= typeList #> action);
    IActionSetup<#= typeList #> DoRepeatedly(System.Action<#= typeList #> action);
}

<#+
}

private string GenerateNumberedList(string format, int count)
{
	return string.Join(", ", Enumerable.Range(1, count).Select(i => string.Format(format, i)));
}

#>
